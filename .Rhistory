# 1) Sex
all <- all %>%
mutate(Sex = factor(Sex))
# 2) Survived
all <- all %>%
mutate(Survived = factor(Survived)) %>%
mutate(Survived = fct_recode(Survived, 'No'='0','Yes'='1'))
# Visualization
ggplot(data = all[1:891, ], mapping = aes(Sex, fill=Survived))+
geom_bar(position='fill')+
geom_hline(yintercept = sum(train$Survived)/nrow(train), lty = 2, col = 'white')
# 4. Check Cabin Data Missing Processing
aggr(all, prop = F, numbers = T,cex.axis = 0.4) # 확률 대신 정수로 표현하겠다는 뜻
aggr(all, prop = F, numbers = T,
col = c('ivory', 'orange'),
ylab = c('Mssing Num','Missng Relation'),
combine = T,
cex.axis = .5)  # 위 두 가지 그래프를 합쳐서 볼 수 있음
#Embarked,Fare,Cabin,Age,Survived에결측치가 존재함
# 1) Check Embarked
table(is.na(all$Embarked))
# Data NA 변환 확인
all[is.na(all$Embarked),]
# 아래 결과를 보면
all[-c(62,830),] %>%
filter(Pclass == 1) %>%
group_by(Embarked) %>%
summarise(mean_Fare = mean(Fare, na.rm =T),
n = n())
# 시각화로 확인
all[-c(62,830),] %>%
filter(Pclass == 1) %>%
ggplot(mapping= aes(Embarked,Fare,fill = Embarked))+
geom_boxplot(alpha = 0.7)+
geom_hline(yintercept = 80)
# C로 치환하는게 로지컬 하다는 생각이 든다.
all[is.na(all$Embarked),'Embarked'] <- 'C'
all[c(62,830),] # 잘변환되었음
# 2) Fare에 대한  Imputation
# a. Fare Value Indexing
all[is.na(all$Fare),] # 1044
# Age와 Fare과 상관관계가 있을까?
ggplot(data=all,aes(Age,Fare))+
geom_point()+
geom_smooth(method='lm', formula = Fare ~ Age)+
ylim(0,300)
# **추세는 없어보임
# 회귀분석 결과
fit <- lm(data = all, Fare ~ Age)
summary(fit)
# **유의미한 결과가 있다..?
# prediction 진행
new_test = data.frame(
Age = c(60.5)
)
predict(fit, newdata = new_test) # 57.90377
# b. Pclass = 3 에 대한 Mean Imputation
all %>% group_by(Pclass) %>%
summarise(mean_Fare = mean(Fare, na.rm= T)) %>%
.[3,2] # 13.3
#
all %>%
group_by(Pclass) %>%
summarise(mean_Fare = mean(Fare, na.rm =T)) %>%
ggplot(aes(Pclass,mean_Fare))+
geom_col()+
geom_text(aes(label = scale::percent(mean_Fare)), position= position_dodge(width = 0.8), vjust = -.3)
#
all %>%
group_by(Pclass) %>%
summarise(mean_Fare = mean(Fare, na.rm =T)) %>%
ggplot(aes(Pclass,mean_Fare))+
geom_col()+
geom_text(aes(label = scales::percent(mean_Fare)), position= position_dodge(width = 0.8), vjust = -.3)
#
all %>%
group_by(Pclass) %>%
summarise(mean_Fare = mean(Fare, na.rm =T)) %>%
ggplot(aes(Pclass,mean_Fare))+
geom_col()+
geom_text(aes(label = mean_Fare), position= position_dodge(width = 0.8), vjust = -.3)
all %>%
group_by(Pclass) %>%
summarise(mean_Fare = mean(Fare, na.rm =T))
#
all %>%
group_by(Pclass) %>%
summarise(mean_Fare = mean(Fare, na.rm =T)) %>%
ggplot(aes(Pclass,mean_Fare))+
geom_col()+
geom_text(aes(label = round(mean_Fare),2), position= position_dodge(width = 0.8), vjust = -.3)
#
all %>%
group_by(Pclass) %>%
summarise(mean_Fare = mean(Fare, na.rm =T)) %>%
ggplot(aes(Pclass,mean_Fare))+
geom_col()+
geom_text(aes(label = round(mean_Fare),.1), position= position_dodge(width = 0.8), vjust = -.3)
#
all %>%
group_by(Pclass) %>%
summarise(mean_Fare = mean(Fare, na.rm =T)) %>%
ggplot(aes(Pclass,mean_Fare))+
geom_col()+
geom_text(aes(label = round(mean_Fare),0), position= position_dodge(width = 0.8), vjust = -.3)
#
all %>%
group_by(Pclass) %>%
summarise(mean_Fare = mean(Fare, na.rm =T)) %>%
ggplot(aes(Pclass,mean_Fare))+
geom_col()+
geom_text(aes(label = round(mean_Fare),0), vjust = -.3)
#
all %>%
group_by(Pclass) %>%
summarise(mean_Fare = mean(Fare, na.rm =T)) %>%
ggplot(aes(Pclass,mean_Fare))+
geom_col()+
geom_text(aes(label = round(mean_Fare),0), position = position_dodge(width = 0.8), vjust = -.3)
#
all %>%
group_by(Pclass) %>%
summarise(mean_Fare = round(mean(Fare, na.rm =T),0)) %>%
ggplot(aes(Pclass,mean_Fare))+
geom_col()+
geom_text(aes(label = mean_Fare), position = position_dodge(width = 0.8), vjust = -.3)
#
all %>%
group_by(Pclass) %>%
summarise(mean_Fare = round(mean(Fare, na.rm =T),1)) %>%
ggplot(aes(Pclass,mean_Fare))+
geom_col()+
geom_text(aes(label = mean_Fare), position = position_dodge(width = 0.8), vjust = -.3)
# a. Fare Value Indexing
all[is.na(all$Fare),] # 1044
# Embarked에 따른 금액
all %>%
group_by(Embarked) %>%
summarise(mean_Fare = round(mean(Fare, na.rm =T),1)) %>%
ggplot(aes(Embarked,mean_Fare))+
geom_col()+
geom_text(aes(label = mean_Fare), position = position_dodge(width = 0.8), vjust = -.3)
library(dplyr)
library(ggplot2)
library(VIM) # Visualzation and imputation of Missing Values
library(corrplot) # corrplot
library(RColorBrewer)
library(forcats)# 범주형 변수를 다루는데 도움을 주는 패키지
library(scales)
summary(fit)
# Age와 Fare과 상관관계가 있을까?
ggplot(data=all,aes(Age,Fare))+
geom_point()+
geom_smooth(method='lm', formula = Fare ~ Age)+
ylim(0,300)
# a. Fare Value Indexing
all[is.na(all$Fare),] # 1044
# 성별에 따른 Fare의 차이
all %>%
group_by(Sex) %>%
summarise(mean_Fare = mean(Fare, na.rm =T),
n = n()) %>%
ggplot(mapping=aes(Sex, mean_Fare, fill = Sex))+
geom_col() +
geom_text(aes(label = n), position = position_dodge(width = 0.8), vjust = -0.3) # n의 숫자
# Pclass에 따른 금액
all %>%
group_by(Pclass) %>%
summarise(mean_Fare = round(mean(Fare, na.rm =T),1)) %>%
ggplot(aes(Pclass,mean_Fare))+
geom_col()+
geom_text(aes(label = mean_Fare), position = position_dodge(width = 0.8), vjust = -.3)
# Embarked에 따른 금액
all %>%
group_by(Embarked) %>%
summarise(mean_Fare = round(mean(Fare, na.rm =T),1)) %>%
ggplot(aes(Embarked,mean_Fare))+
geom_col()+
geom_text(aes(label = mean_Fare), position = position_dodge(width = 0.8), vjust = -.3)
# b-1. Pclass와 Fare 간의 Boxplot 그리기
all %>% ggplot(mapping = aes(Pclass,Fare)) +
geom_boxplot(fill = 'skyblue')
# b-1. Pclass와 Fare 간의 Boxplot 그리기
all %>% ggplot(mapping = aes(Pclass,Fare)) +
geom_boxplot(fill = 'skyblue')
all
#### 2. Data Check
str(all)
# 1) Sex, Pclass
all <- all %>%
mutate(Sex = factor(Sex),
Pclass = factor(Pclass))
#### 2. Data Check
str(all)
# Pclass에 따른 금액
all %>%
group_by(Pclass) %>%
summarise(mean_Fare = round(mean(Fare, na.rm =T),1)) %>%
ggplot(aes(Pclass,mean_Fare))+
geom_col()+
geom_text(aes(label = mean_Fare), position = position_dodge(width = 0.8), vjust = -.3)
# b-1. Pclass와 Fare 간의 Boxplot 그리기
all %>% ggplot(mapping = aes(Pclass,Fare)) +
geom_boxplot(fill = 'skyblue')
# b-2. Embarked와 Fare 간의 관계
ggplot(data = all, mapping = aes(Embarked, Fare))+
geom_boxplot()
# b-3. Embarked와 Pclass를 반영해서 mean과 median 값을 구해보자
all %>%
group_by(Embarked, Pclass) %>%
summarise(mean_Fare = mean(Fare),
median_Fare = median(Fare))
predict(fit, newdata = new_test) # 57.90377
# a. Fare Value Indexing
all[is.na(all$Fare),] # 1044
# b-3. Embarked와 Pclass를 반영해서 mean과 median 값을 구해보자
all %>%
group_by(Embarked, Pclass) %>%
summarise(mean_Fare = mean(Fare),
median_Fare = median(Fare))
# b-3. Embarked와 Pclass를 반영해서 mean과 median 값을 구해보자
all %>%
group_by(Embarked, Pclass) %>%
summarise(mean_Fare = mean(Fare.na.rm =T),
median_Fare = median(Fare),
n =n())
# b-3. Embarked와 Pclass를 반영해서 mean과 median 값을 구해보자
all %>%
group_by(Embarked, Pclass) %>%
summarise(mean_Fare = mean(Fare, na.rm =T),
median_Fare = median(Fare),
n =n())
# b-3. Embarked와 Pclass를 반영해서 mean과 median 값을 구해보자
all %>%
group_by(Embarked, Pclass) %>%
summarise(mean_Fare = mean(Fare, na.rm =T),
median_Fare = median(Fare, na.rm=T),
n =n())
all[is.na(all$Fare),Fare]
all[is.na(all$Fare),'Fare']
all[is.na(all$Fare),'Fare'] <- 8.05
all[is.na(all$Fare),]
all[1044,]
aggr(all, prop = F, numbers = T,cex.axis = 0.4) # 확률 대신 정수로 표현하겠다는 뜻
aggr(all, prop = F, numbers = T,
col = c('ivory', 'orange'),
ylab = c('Mssing Num','Missng Relation'),
combine = T,
cex.axis = .5)  # 위 두 가지 그래프를 합쳐서 볼 수 있음
aggr(all, prop = F, numbers = T,cex.axis = 0.4) # 확률 대신 정수로 표현하겠다는 뜻
aggr(all, prop = F, numbers = T,
col = c('ivory', 'orange'),
ylab = c('Mssing Num','Missng Relation'),
combine = T,
cex.axis = .5)  # 위 두 가지 그래프를 합쳐서 볼 수 있음
ggplot(data = all, mapping=aes(Age, fill=Age))+
geom_density()
ggplot(data = all, mapping=aes(Age, fill=Age, col = 'blue'))+
geom_density()
ggplot(data = all, mapping=aes(Age, fill='blue'))+
geom_density()
ggplot(data = all, mapping=aes(Age))+
geom_density(fill='blue')
ggplot(data = all, mapping=aes(Age))+
geom_density(fill='blue')+
geom_hline(yintercept = median(Age,na.rm=T))
ggplot(data = all, mapping=aes(Age))+
geom_density(fill='blue')+
geom_hline(yintercept = median(all$Age,na.rm=T))
ggplot(data = all, mapping=aes(Age))+
geom_density(fill='blue')+
geom_hline(xintercept = median(all$Age,na.rm=T))
ggplot(data = all, mapping=aes(Age))+
geom_density(fill='blue')
ggplot(data = all, mapping=aes(Age))+
geom_density(fill='blue')+
geom_vline(xintercept = median(all$Age,na.rm=T))
ggplot(data = all, mapping=aes(Age))+
geom_density(fill='blue')+
geom_vline(xintercept = median(all$Age,na.rm=T), ley =2)
ggplot(data = all, mapping=aes(Age))+
geom_density(fill='blue')+
geom_vline(xintercept = median(all$Age,na.rm=T), lty =2)
ggplot(data = all, mapping=aes(Age))+
geom_density(fill='blue')+
geom_vline(xintercept = median(all$Age,na.rm=T), lty = 2, col ='red')
library(dplyr)
library(ggplot2)
library(VIM) # Visualzation and imputation of Missing Values
library(corrplot) # corrplot
library(RColorBrewer)
library(forcats)# 범주형 변수를 다루는데 도움을 주는 패키지
library(scales)
all[1044,]
ggplot(data = all, mapping=aes(Age))+
geom_density(fill='blue')+
geom_vline(xintercept = median(all$Age,na.rm=T), lty = 2, col ='red')
aggr(all, prop = F, numbers = T,cex.axis = 0.4) # 확률 대신 정수로 표현하겠다는 뜻
aggr(all, prop = F, numbers = T,
col = c('ivory', 'orange'),
ylab = c('Mssing Num','Missng Relation'),
combine = T,
cex.axis = .5)  # 위 두 가지 그래프를 합쳐서 볼 수 있음
head(all)
head(all,10)
View(all)
View(all)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub(all$Name, '(?:\, )[a-zA-z.]+')
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(?:\, )[a-zA-z.]+',all$Name)
library(stringr)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(?:\, )[a-zA-z.]+',all$Name)
#### package load
# install.packages('VIM')
# install.packages('gridExtra')
# install.packages('corrplot')
# install.packages('dplyr')
# install.packages('ggplot2')
# install.packages('RColorBrewer')
# install.packages('rmarkdown')
# install.packages("knitr")
# install.packages("forcats")
# install.packages("scales")
library(dplyr)
library(ggplot2)
library(VIM) # Visualzation and imputation of Missing Values
library(corrplot) # corrplot
library(RColorBrewer)
library(forcats)# 범주형 변수를 다루는데 도움을 주는 패키지
library(scales)
library(stringr)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|(. [a-zA-Z ()]+)',all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|(. [a-zA-Z ()]+)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|(.\\[a-zA-Z ()]+)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|(.[\\a-zA-Z ()]+)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|(.[\a-zA-Z ()]+)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|(.[a-zA-Z ()]+)','', all$Name)
all[1044,]
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|(. [a-zA-Z ()]+)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|(. [a-zA-Z ()\\]+)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|(\\..*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.*, )|(\\..*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|(. [a-zA-Z \\\(\)\"]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|(. [a-zA-Z \\\(\)\"]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|(. [a-zA-Z \\\(\)]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|(. [a-zA-Z \\ \(\)]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|(. [a-zA-Z\\\(\)]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|( [a-zA-Z \(\)\"]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|( [a-zA-Z \\\"]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|( [a-zA-Z \\\"\(\)]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|( [a-zA-Z \\\"()]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|( [a-zA-Z \\\"()-]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|( [a-zA-Z \\\"()-/]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
all$title <- gsub('(.+, )|( [a-zA-Z \\\"()-/]*)','', all$Name)
unique(all$title)
unique(gsub('(.+, )|(\\..*)','', all$Name))
grep(all$Name, 'the Countess')
grep('the Countess',all$Name)
unique(gsub('(.+, )|(\. [a-zA-Z \\\"()-]*)','', all$Name))
unique(gsub('(.+, )|(\\. [a-zA-Z \\\"()-]*)','', all$Name))
unique(gsub('(.+, )|(\\..*)','', all$Name))
unique(gsub('(.+, )|(\\. [a-zA-Z \\\"()-]*)','', all$Name))
# a) 나이에 대한 Imputation을 위한 Name Column 작업
all$title <- gsub('(.+, )|(\\..*)','', all$Name)
unique(all$title)
table(all$title)
#### package load
# install.packages('VIM')
# install.packages('gridExtra')
# install.packages('corrplot')
# install.packages('dplyr')
# install.packages('ggplot2')
# install.packages('RColorBrewer')
# install.packages('rmarkdown')
# install.packages("knitr")
# install.packages("forcats")
# install.packages("scales")
library(dplyr)
library(ggplot2)
library(VIM) # Visualzation and imputation of Missing Values
library(corrplot) # corrplot
library(RColorBrewer)
library(forcats)# 범주형 변수를 다루는데 도움을 주는 패키지
library(scales)
library(stringr)
table(all$title)
table(all$title, all$Sex)
table(all$Sex, all$title)
grep('the Countess',all$Name)
c('Capt','Col','Dona','Don','Dr','Jonkheer',
'Lady','Major','Mlle','Mme','Ms','Rev','Sir','the Countess')
table(all$Sex, all$title)
all$title[all$title=='Mrs']
all$title[all$title=='Mlle']
all$title[all$title=='Mme']
rare_title <- c('Capt','Col','Dona','Don','Dr','Jonkheer',
'Lady','Major','Mlle','Mme','Ms','Rev','Sir','the Countess')
all$title[all$title %in% rare_title]
all$title[all$title %in% rare_title] <- 'rare title'
all$title[all$title=='Mlle'] <- 'Miss'
all$title[all$title=='Ms'] <- 'Miss'
all$title[all$title=='Mme'] <- 'Mrs'
### Variable Definition
# survival	Survival	0 = No, 1 = Yes
# pclass	Ticket class	1 = 1st, 2 = 2nd, 3 = 3rd
# sex	Sex
# Age	Age in years
# sibsp	# of siblings / spouses aboard the Titanic
# parch	# of parents / children aboard the Titanic
# ticket	Ticket number
# fare	Passenger fare
# cabin	Cabin number
# embarked	Port of Embarkation
#### 1. Data Load
train <- read.csv('data/train.csv', na.strings = c('','NA')) # 애초에 로딩할 때 부터 공백은 NA로 출력되도록 설정하기
test <- read.csv('data/test.csv', na.strings = c('','NA'))
all <- bind_rows(train,test) # 두개의 데이터를 합친다.
all_Origin <- all
#### 2. Data Check
str(all)
summary(all)
glimpse(all)
#### 3. Count Survival
train %>% count(Survived)
surv <- train %>% count(Survived) %>% filter(Survived == 1) %>% .$n
nosurv <- train %>% count(Survived) %>% filter(Survived == 0) %>% .$n
# Survival Rate
train %>%
summarise(Rate_Suv = sum(Survived,na.rm = T) / nrow(train) * 100)
# Factor Recoding
# 1) Sex, Pclass
all <- all %>%
mutate(Sex = factor(Sex),
Pclass = factor(Pclass))
# 2) Survived
all <- all %>%
mutate(Survived = factor(Survived)) %>%
mutate(Survived = fct_recode(Survived, 'No'='0','Yes'='1'))
# Visualization
ggplot(data = all[1:891, ], mapping = aes(Sex, fill=Survived))+
geom_bar(position='fill')+
geom_hline(yintercept = sum(train$Survived)/nrow(train), lty = 2, col = 'white')
table(all$Sex, all$title)
# 1. Age Feature Engineering
all$title <- gsub('(.+, )|(\\..*)','', all$Name)
table(all$Sex, all$title)
rare_title <- c('Capt','Col','Dona','Don','Dr','Jonkheer',
'Lady','Major','Rev','Sir','the Countess')
all$title[all$title=='Mlle'] <- 'Miss'
all$title[all$title=='Ms'] <- 'Miss'
all$title[all$title=='Mme'] <- 'Mrs'
all$title[all$title %in% rare_title] <- 'rare title'
table(all$Sex, all$title)
sapply(full$Name,
function(x) strsplit(x, split = '[,.]')[[1]][1])
sapply(all$Name,
function(x) strsplit(x, split = '[,.]')[[1]][1])
head(sapply(all$Name,
function(x) strsplit(x, split = '[,.]')[[1]][1]))
strsplit(all$Name, split=',')
head(strsplit(all$Name, split=','))
head(strsplit(all$Name, split='[,.]'))
head(strsplit(all$Name, split='[,.]')[[1]])
head(strsplit(all$Name, split='[,.]')[[1]][1])
head(sapply(all$Name, function(x) {strsplit(x, split='[,.]')[[1]][1]}))
# 1-1. Surname
head(all$Name)
head(strsplit(all$Name, split='[,.]')[[1]][1])
head(sapply(all$Name, function(x) {strsplit(x, split='[,.]')[[1]][1]}))
all$Surname <- sapply(all$Name,
function(x) strsplit(x, split = '[,.]')[[1]][1])
#2. FamilySize
all %>% ggplot(mapping=aes(SibSp, fill=Survived))+
geom_bar()
#2. FamilySize
all[1:891,] %>% ggplot(mapping=aes(SibSp, fill=Survived))+
geom_bar()
#2. FamilySize
all[1:891,] %>% ggplot(mapping=aes(SibSp, fill=Survived))+
geom_bar(position='dodge')
all[1:891,] %>% ggplot(mapping=aes(Parch, fill=Survived))+
geom_bar(position='dodge') # Stack이 안되도록 하는 명령어
#2. FamilySize
#2-1. Sibsp에 에 따른 생존여부
all$Fsize <- all$SibSp + all$Parch + 1
head(all$Fsize)
all[1:891,] %>% ggplot(mapping=aes(Fsize, fill=Survived))+
geom_bar(position='dodge') # Stack이 안되도록 하는 명령어
