gsub('(.*, )|(\\..*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|(. [a-zA-Z \\\(\)\"]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|(. [a-zA-Z \\\(\)\"]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|(. [a-zA-Z \\\(\)]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|(. [a-zA-Z \\ \(\)]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|(. [a-zA-Z\\\(\)]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|( [a-zA-Z \(\)\"]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|( [a-zA-Z \\\"]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|( [a-zA-Z \\\"\(\)]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|( [a-zA-Z \\\"()]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|( [a-zA-Z \\\"()-]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
gsub('(.+, )|( [a-zA-Z \\\"()-/]*)','', all$Name)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
all$title <- gsub('(.+, )|( [a-zA-Z \\\"()-/]*)','', all$Name)
unique(all$title)
unique(gsub('(.+, )|(\\..*)','', all$Name))
grep(all$Name, 'the Countess')
grep('the Countess',all$Name)
unique(gsub('(.+, )|(\. [a-zA-Z \\\"()-]*)','', all$Name))
unique(gsub('(.+, )|(\\. [a-zA-Z \\\"()-]*)','', all$Name))
unique(gsub('(.+, )|(\\..*)','', all$Name))
unique(gsub('(.+, )|(\\. [a-zA-Z \\\"()-]*)','', all$Name))
# a) 나이에 대한 Imputation을 위한 Name Column 작업
all$title <- gsub('(.+, )|(\\..*)','', all$Name)
unique(all$title)
table(all$title)
#### package load
# install.packages('VIM')
# install.packages('gridExtra')
# install.packages('corrplot')
# install.packages('dplyr')
# install.packages('ggplot2')
# install.packages('RColorBrewer')
# install.packages('rmarkdown')
# install.packages("knitr")
# install.packages("forcats")
# install.packages("scales")
library(dplyr)
library(ggplot2)
library(VIM) # Visualzation and imputation of Missing Values
library(corrplot) # corrplot
library(RColorBrewer)
library(forcats)# 범주형 변수를 다루는데 도움을 주는 패키지
library(scales)
library(stringr)
table(all$title)
table(all$title, all$Sex)
table(all$Sex, all$title)
grep('the Countess',all$Name)
c('Capt','Col','Dona','Don','Dr','Jonkheer',
'Lady','Major','Mlle','Mme','Ms','Rev','Sir','the Countess')
table(all$Sex, all$title)
all$title[all$title=='Mrs']
all$title[all$title=='Mlle']
all$title[all$title=='Mme']
rare_title <- c('Capt','Col','Dona','Don','Dr','Jonkheer',
'Lady','Major','Mlle','Mme','Ms','Rev','Sir','the Countess')
all$title[all$title %in% rare_title]
all$title[all$title %in% rare_title] <- 'rare title'
all$title[all$title=='Mlle'] <- 'Miss'
all$title[all$title=='Ms'] <- 'Miss'
all$title[all$title=='Mme'] <- 'Mrs'
### Variable Definition
# survival	Survival	0 = No, 1 = Yes
# pclass	Ticket class	1 = 1st, 2 = 2nd, 3 = 3rd
# sex	Sex
# Age	Age in years
# sibsp	# of siblings / spouses aboard the Titanic
# parch	# of parents / children aboard the Titanic
# ticket	Ticket number
# fare	Passenger fare
# cabin	Cabin number
# embarked	Port of Embarkation
#### 1. Data Load
train <- read.csv('data/train.csv', na.strings = c('','NA')) # 애초에 로딩할 때 부터 공백은 NA로 출력되도록 설정하기
test <- read.csv('data/test.csv', na.strings = c('','NA'))
all <- bind_rows(train,test) # 두개의 데이터를 합친다.
all_Origin <- all
#### 2. Data Check
str(all)
summary(all)
glimpse(all)
#### 3. Count Survival
train %>% count(Survived)
surv <- train %>% count(Survived) %>% filter(Survived == 1) %>% .$n
nosurv <- train %>% count(Survived) %>% filter(Survived == 0) %>% .$n
# Survival Rate
train %>%
summarise(Rate_Suv = sum(Survived,na.rm = T) / nrow(train) * 100)
# Factor Recoding
# 1) Sex, Pclass
all <- all %>%
mutate(Sex = factor(Sex),
Pclass = factor(Pclass))
# 2) Survived
all <- all %>%
mutate(Survived = factor(Survived)) %>%
mutate(Survived = fct_recode(Survived, 'No'='0','Yes'='1'))
# Visualization
ggplot(data = all[1:891, ], mapping = aes(Sex, fill=Survived))+
geom_bar(position='fill')+
geom_hline(yintercept = sum(train$Survived)/nrow(train), lty = 2, col = 'white')
table(all$Sex, all$title)
# 1. Age Feature Engineering
all$title <- gsub('(.+, )|(\\..*)','', all$Name)
table(all$Sex, all$title)
rare_title <- c('Capt','Col','Dona','Don','Dr','Jonkheer',
'Lady','Major','Rev','Sir','the Countess')
all$title[all$title=='Mlle'] <- 'Miss'
all$title[all$title=='Ms'] <- 'Miss'
all$title[all$title=='Mme'] <- 'Mrs'
all$title[all$title %in% rare_title] <- 'rare title'
table(all$Sex, all$title)
sapply(full$Name,
function(x) strsplit(x, split = '[,.]')[[1]][1])
sapply(all$Name,
function(x) strsplit(x, split = '[,.]')[[1]][1])
head(sapply(all$Name,
function(x) strsplit(x, split = '[,.]')[[1]][1]))
strsplit(all$Name, split=',')
head(strsplit(all$Name, split=','))
head(strsplit(all$Name, split='[,.]'))
head(strsplit(all$Name, split='[,.]')[[1]])
head(strsplit(all$Name, split='[,.]')[[1]][1])
head(sapply(all$Name, function(x) {strsplit(x, split='[,.]')[[1]][1]}))
# 1-1. Surname
head(all$Name)
head(strsplit(all$Name, split='[,.]')[[1]][1])
head(sapply(all$Name, function(x) {strsplit(x, split='[,.]')[[1]][1]}))
all$Surname <- sapply(all$Name,
function(x) strsplit(x, split = '[,.]')[[1]][1])
#2. FamilySize
all %>% ggplot(mapping=aes(SibSp, fill=Survived))+
geom_bar()
#2. FamilySize
all[1:891,] %>% ggplot(mapping=aes(SibSp, fill=Survived))+
geom_bar()
#2. FamilySize
all[1:891,] %>% ggplot(mapping=aes(SibSp, fill=Survived))+
geom_bar(position='dodge')
all[1:891,] %>% ggplot(mapping=aes(Parch, fill=Survived))+
geom_bar(position='dodge') # Stack이 안되도록 하는 명령어
#2. FamilySize
#2-1. Sibsp에 에 따른 생존여부
all$Fsize <- all$SibSp + all$Parch + 1
head(all$Fsize)
all[1:891,] %>% ggplot(mapping=aes(Fsize, fill=Survived))+
geom_bar(position='dodge') # Stack이 안되도록 하는 명령어
#### package load
# install.packages('VIM')
# install.packages('gridExtra')
# install.packages('corrplot')
# install.packages('dplyr')
# install.packages('ggplot2')
# install.packages('RColorBrewer')
# install.packages('rmarkdown')
# install.packages("knitr")
# install.packages("forcats")
# install.packages("scales")
# install.packages("randomForest")
# install.packages('mice')
library(dplyr)
library(ggplot2)
library(VIM) # Visualzation and imputation of Missing Values
library(corrplot) # corrplot
library(RColorBrewer)
library(forcats)# 범주형 변수를 다루는데 도움을 주는 패키지
library(scales)
library(stringr)
library(randomForest)
library(mice)
importance(rf_model)
importance(rf_model)
# Build the model (note: not all possible variables are used)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + title + FsizeD,
data = train)
### Variable Definition
# survival	Survival	0 = No, 1 = Yes
# pclass	Ticket class	1 = 1st, 2 = 2nd, 3 = 3rd
# sex	Sex
# Age	Age in years
# sibsp	# of siblings / spouses aboard the Titanic
# parch	# of parents / children aboard the Titanic
# ticket	Ticket number
# fare	Passenger fare
# cabin	Cabin number
# embarked	Port of Embarkation
#### 1. Data Load
train <- read.csv('data/train.csv', na.strings = c('','NA')) # 애초에 로딩할 때 부터 공백은 NA로 출력되도록 설정하기
test <- read.csv('data/test.csv', na.strings = c('','NA'))
all <- bind_rows(train,test) # 두개의 데이터를 합친다.
all_Origin <- all
#### 2. Data Check
str(all)
summary(all)
glimpse(all)
#### 3. Count Survival
train %>% count(Survived)
surv <- train %>% count(Survived) %>% filter(Survived == 1) %>% .$n
nosurv <- train %>% count(Survived) %>% filter(Survived == 0) %>% .$n
# Survival Rate
train %>%
summarise(Rate_Suv = sum(Survived,na.rm = T) / nrow(train) * 100)
# Factor Recoding
# 1) Sex, Pclass
all <- all %>%
mutate(Sex = factor(Sex),
Pclass = factor(Pclass))
# 2) Survived
all <- all %>%
mutate(Survived = factor(Survived)) %>%
mutate(Survived = fct_recode(Survived, 'No'='0','Yes'='1'))
# Visualization
ggplot(data = all[1:891, ], mapping = aes(Sex, fill=Survived))+
geom_bar(position='fill')+
geom_hline(yintercept = sum(train$Survived)/nrow(train), lty = 2, col = 'white')
#순서는 Data Check -> Feature Engineering -> Missingness Imputation -> Modeling 순으로 진행한다.
# 1. Age Feature Engineering
all$title <- gsub('(.+, )|(\\..*)','', all$Name)
table(all$Sex, all$title)
# 1-1. Title
rare_title <- c('Capt','Col','Dona','Don','Dr','Jonkheer',
'Lady','Major','Rev','Sir','the Countess')
all$title[all$title=='Mlle'] <- 'Miss'
all$title[all$title=='Ms'] <- 'Miss'
all$title[all$title=='Mme'] <- 'Mrs'
all$title[all$title %in% rare_title] <- 'rare title'
# 1-2. Surname
head(all$Name)
head(strsplit(all$Name, split='[,.]')[[1]][1])
##이렇게 하면 하나씩 밖에 값을 얻지 못하므로, sapply 함수를 사용해서 전체를 끌고온다
##루프문과 어떻게 보면 비슷하다고 볼 수 있겠다.
##결과값은 Vector형식으로 뱉어준다.
all$Surname <- sapply(all$Name,
function(x) strsplit(x, split = '[,.]')[[1]][1])
#2. FamilySize
#2-1. Sibsp에 에 따른 생존여부
all$Fsize <- all$SibSp + all$Parch + 1
all[1:891,] %>% ggplot(mapping=aes(Fsize, fill=Survived))+
geom_bar(position='dodge') # Stack이 안되도록 하는 명령어
# Discretize family size
all$FsizeD[all$Fsize == 1] <- 'singleton'
all$FsizeD[all$Fsize < 5 & all$Fsize > 1] <- 'small'
all$FsizeD[all$Fsize > 4] <- 'large'
# 4. Check Cabin Data Missing Processing
aggr(all, prop = F, numbers = T,cex.axis = 0.4) # 확률 대신 정수로 표현하겠다는 뜻
aggr(all, prop = F, numbers = T,
col = c('ivory', 'orange'),
ylab = c('Mssing Num','Missng Relation'),
combine = T,
cex.axis = .5)  # 위 두 가지 그래프를 합쳐서 볼 수 있음
#Embarked,Fare,Cabin,Age,Survived에결측치가 존재함
# 1) Check Embarked
table(is.na(all$Embarked))
# Data NA 변환 확인
all[is.na(all$Embarked),]
# 아래 결과를 보면
all[-c(62,830),] %>%
filter(Pclass == 1) %>%
group_by(Embarked) %>%
summarise(mean_Fare = mean(Fare, na.rm =T),
n = n())
# 시각화로 확인
all[-c(62,830),] %>%
filter(Pclass == 1) %>%
ggplot(mapping= aes(Embarked,Fare,fill = Embarked))+
geom_boxplot(alpha = 0.7)+
geom_hline(yintercept = 80)
# C로 치환하는게 로지컬 하다는 생각이 든다.
all[is.na(all$Embarked),'Embarked'] <- 'C'
all[c(62,830),] # 잘변환되었음
# 2) Fare에 대한  Imputation
# a. Fare Value Indexing
all[is.na(all$Fare),] # 1044
# Age와 Fare과 상관관계가 있을까?
ggplot(data=all,aes(Age,Fare))+
geom_point()+
geom_smooth(method='lm', formula = Fare ~ Age)+
ylim(0,300)
# **추세는 없어보임
# 회귀분석 결과
fit <- lm(data = all, Fare ~ Age)
summary(fit)
# **유의미한 결과가 있다..?
# prediction 진행
new_test = data.frame(
Age = c(60.5)
)
predict(fit, newdata = new_test) # 57.90377
# 성별에 따른 Fare의 차이
all %>%
group_by(Sex) %>%
summarise(mean_Fare = mean(Fare, na.rm =T),
n = n()) %>%
ggplot(mapping=aes(Sex, mean_Fare, fill = Sex))+
geom_col() +
geom_text(aes(label = n), position = position_dodge(width = 0.8), vjust = -0.3) # n의 숫자
# ** 여자가 45$, 남자가 28$ 정도로 여자가 더 높은 금액을 지불하는 경향
# Pclass에 따른 금액
all %>%
group_by(Pclass) %>%
summarise(mean_Fare = round(mean(Fare, na.rm =T),1)) %>%
ggplot(aes(Pclass,mean_Fare))+
geom_col()+
geom_text(aes(label = mean_Fare), position = position_dodge(width = 0.8), vjust = -.3)
# 3등석이므로 13.3
# Embarked에 따른 금액
all %>%
group_by(Embarked) %>%
summarise(mean_Fare = round(mean(Fare, na.rm =T),1)) %>%
ggplot(aes(Embarked,mean_Fare))+
geom_col()+
geom_text(aes(label = mean_Fare), position = position_dodge(width = 0.8), vjust = -.3)
# S이므로 27.4
# Age, Plcass, Embarked 관점에서 보게 되는 Imputing 값이 다르다.
# b-1. Pclass와 Fare 간의 Boxplot 그리기
all %>% ggplot(mapping = aes(Pclass,Fare)) +
geom_boxplot(fill = 'skyblue')
# 분명히 Pclass와 Fare 간에는 상당한 관련성이 있음
# b-2. Embarked와 Fare 간의 관계
ggplot(data = all, mapping = aes(Embarked, Fare))+
geom_boxplot()
# b-3. Embarked와 Pclass를 반영해서 mean과 median 값을 구해보자
all %>%
group_by(Embarked, Pclass) %>%
summarise(mean_Fare = mean(Fare, na.rm =T), # 14.4
median_Fare = median(Fare, na.rm=T), # 8.05
n =n())
## 1개의 값이고 Imputation에 큰 영향이 없으므로 간단하게 마무리한다.
## Embarked와 Pclass의 기준으로 최종 Inputation을 하는 게 로지컬해보인다.
## 그래서 중앙 값인 8.05로 대체하기로 하자
## 나중에 Imputation에 대한 방법론은 제대로 학습할 필요가 있을 것 같다.
all[is.na(all$Fare),'Fare'] <- 8.05
all[1044,]
# 3) Age에 대한 Imputation
# Age 안에는 총 250개 정도의 결측값이 있음
ggplot(data = all, mapping=aes(Age))+
geom_density(fill='blue')+
geom_vline(xintercept = median(all$Age,na.rm=T), lty = 2, col ='red')
head(all,10)
# a) 나이에 대한 Imputation을 위한 Name Column 작업
sum(is.na(all$Age))
# Make variables factors into factors
factor_vars <- c('PassengerId','Pclass','Sex','Embarked',
'title','Surname','Fsize','FsizeD')
all[factor_vars] <- lapply(all[factor_vars], function(x) as.factor(x))
# Set a random seed
set.seed(129)
# Perform mice imputation, excluding certain less-than-useful variables:
mice_mod <- mice(all[, !names(all) %in% c('PassengerId','Name','Ticket','Cabin','Fsize','Surname','Survived')], method='rf')
mice_output <- complete(mice_mod)
par(mfrow=c(1,2))
hist(all$Age, freq=F, main='Age: Original Data',
col='darkgreen', ylim=c(0,0.04))
hist(mice_output$Age, freq=F, main='Age: MICE Output',
col='lightgreen', ylim=c(0,0.04))
# Replace Age variable from the mice model.
all$Age <- mice_output$Age
# Show new number of missing Age values
sum(is.na(all$Age))
aggr(all, numbers = T, combined= T,ces.axis =.8)
# Split the data back into a train set and a test set
train <- all[1:891,]
test <- all[892:1309,]
set.seed(754)
# Build the model (note: not all possible variables are used)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch +
Fare + Embarked + title + FsizeD,
data = train)
# Show model error
plot(rf_model, ylim=c(0,0.36))
legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)
importance(rf_model)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance),
Importance = round(importance[,'MeanDecreasGini']))
varImportance
varImportance <- data.frame(Variables = row.names(importance),
Importance = round(importance[,'MeanDecreasGini']))
importance <- importance(rf_model)
importance
varImportance <- data.frame(Variables = row.names(importance),
Importance = round(importance[,'MeanDecreaseGini']))
varImportance
varImportance <- data.frame(Variables = row.names(importance),
Importance = round(importance[,'MeanDecreaseGini'],2))
varImportance
varImportance %>%
mutate(rank = rank(Importance))
# rank in Importance
rankImportance <- varImportance %>%
mutate(rank = dense_rank(desc(Importance)))
rankImportance
# rank in Importance
rankImportance <- varImportance %>%
mutate(rank = paste0('#', dense_rank(desc(Importance))))
rankImportance
# Plot Rank
rankImportance %>%
ggplot(mapping = aes(x = Variables, y = Importance))+
geom_col()
# Plot Rank
rankImportance %>%
ggplot(mapping = aes(x = Variables, y = Importance))+
geom_col()+
coord_flip()
# Plot Rank
rankImportance %>%
ggplot(mapping = aes(x = reorder(Variables,-Importance), y = Importance))+
geom_col()+
coord_flip()
# Plot Rank
rankImportance %>%
ggplot(mapping = aes(x = reorder(Variables,Importance), y = Importance))+
geom_col()+
coord_flip()
# Plot Rank
rankImportance %>%
ggplot(mapping = aes(x = reorder(Variables,Importance), y = Importance, fill = Importance))+
geom_col()+
coord_flip()
# Plot Rank
rankImportance %>%
ggplot(mapping = aes(x = reorder(Variables,Importance), y = Importance, fill = Importance))+
geom_col(stat = 'identity')+
coord_flip()
# Plot Rank
rankImportance %>%
ggplot(mapping = aes(x = reorder(Variables,Importance), y = Importance, fill = Importance))+
geom_col(stat = 'identity')+
geom_text(aes(x = Variables))
# Plot Rank
rankImportance %>%
ggplot(mapping = aes(x = reorder(Variables,Importance), y = Importance, fill = Importance))+
geom_col(stat = 'identity')+
geom_text(aes(x = Variables,y = 0.5, label = Rank))
# Plot Rank
rankImportance %>%
ggplot(mapping = aes(x = reorder(Variables,Importance), y = Importance, fill = Importance))+
geom_col(stat = 'identity')+
geom_text(aes(x = Variables,y = 0.5, label = Rank), hjust = 0, size = 4, color = 'red')
# Plot Rank
rankImportance %>%
ggplot(mapping = aes(x = reorder(Variables,Importance), y = Importance, fill = Importance))+
geom_bar(stat = 'identity')+
geom_text(aes(x = Variables,y = 0.5, label = Rank), hjust = 0, size = 4, color = 'red')
# Plot Rank
rankImportance %>%
ggplot(mapping = aes(x = reorder(Variables,Importance), y = Importance, fill = Importance))+
geom_bar(stat = 'identity')+
geom_text(aes(x = Variables,y = 0.5, label = rank), hjust = 0, size = 4, color = 'red')
# Plot Rank
rankImportance %>%
ggplot(mapping = aes(x = reorder(Variables,Importance), y = Importance, fill = Importance))+
geom_bar(stat = 'identity')+
geom_text(aes(x = Variables,y = 0.5, label = rank), hjust = 0, size = 4, color = 'red')+
coord_flip()
# Plot Rank
rankImportance %>%
ggplot(mapping = aes(x = reorder(Variables,Importance), y = Importance, fill = Importance))+
geom_bar(stat = 'identity')+
geom_text(aes(x = Variables,y = 5, label = rank), hjust = 0, size = 4, color = 'red')+
coord_flip()
# Plot Rank
rankImportance %>%
ggplot(mapping = aes(x = reorder(Variables,Importance), y = Importance, fill = Importance))+
geom_bar(stat = 'identity')+
geom_text(aes(x = Variables,y = 0.5, label = rank), hjust = 0, size = 4, color = 'red')+
coord_flip()
# Plot Rank
rankImportance %>%
ggplot(mapping = aes(x = reorder(Variables,Importance), y = Importance, fill = Importance))+
geom_bar(stat = 'identity')+
geom_text(aes(x = Variables,y = 0.5, label = rank), hjust = 0, size = 3, color = 'red')+
coord_flip()
# Plot Rank
rankImportance %>%
ggplot(mapping = aes(x = reorder(Variables,Importance), y = Importance, fill = Importance))+
geom_bar(stat = 'identity')+
geom_text(aes(x = Variables,y = 0.5, label = rank), hjust = 1, size = 3, color = 'red')+
coord_flip()
# Plot Rank
rankImportance %>%
ggplot(mapping = aes(x = reorder(Variables,Importance), y = Importance, fill = Importance))+
geom_bar(stat = 'identity')+
geom_text(aes(x = Variables,y = 0.5, label = rank), hjust = 0, size = 3, color = 'red')+
coord_flip()
# 4. Real Prediction
preidction <- predict(rf_model, test)
preidction
data.frame(test$PassengerId, prediction)
data.frame(PassengerId = test$PassengerId, Survived= prediction)
# 4. Real Prediction
prediction <- predict(rf_model, test)
data.frame(PassengerId = test$PassengerId, Survived= prediction)
# Write Solution
write.csv(solution, file = 'rf_model.csv', row.names = F)
solution <- data.frame(PassengerId = test$PassengerId, Survived= prediction)
# Write Solution
write.csv(solution, file = 'rf_model.csv', row.names = F)
