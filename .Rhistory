spineMiss(all[,c('Survived','Age')])
# 1) Fare에 대한  Imputation
# a. Fare Value Indexing
all[is.na[all$Fare],]
library(dplyr)
library(ggplot2)
lib
#### package load
library(dplyr)
library(ggplot2)
library(VIM) # Visualzation and imputation of Missing Values
# 1) Fare에 대한  Imputation
# a. Fare Value Indexing
all$Fare[is.na(all$Fare)]
# 1) Fare에 대한  Imputation
# a. Fare Value Indexing
which(all$Fare %in% is.na(all$Fare) )
all[180,0]
all[180,]
all[264,]
# 1) Fare에 대한  Imputation
# a. Fare Value Indexing
Fare[is.na(Fare)]
# 1) Fare에 대한  Imputation
# a. Fare Value Indexing
all$Fare[is.na(Fare)]
Fare
# 1) Fare에 대한  Imputation
# a. Fare Value Indexing
all$Fare[is.na(all$Fare)]
# 1) Fare에 대한  Imputation
# a. Fare Value Indexing
all[is.na(all$Cabin)]
# 1) Fare에 대한  Imputation
# a. Fare Value Indexing
all[is.na(all$Cabin),]
# 1) Fare에 대한  Imputation
# a. Fare Value Indexing
all$PassengerId[is.na(all$Cabin),]
# 1) Fare에 대한  Imputation
# a. Fare Value Indexing
all$Cabin[is.na(all$Cabin),]
# 1) Fare에 대한  Imputation
# a. Fare Value Indexing
all$Cabin[is.na(all$Cabin)]
# 1) Fare에 대한  Imputation
# a. Fare Value Indexing
all[is.na(all$Fare),]
all_Origin <- all
hist(all$Fare)
hist(all$Fare,breaks = 20)
hist(all$Fare,breaks = 10)
hist(all$Fare,breaks = 30)
hist(all$Fare,breaks = 50)
density(all$Fare)
density(all$Fare, na.rm =T)
d <- density(all$Fare, na.rm =T)
plot(d)
# 1) Fare에 대한  Imputation
# a. Fare Value Indexing
all[is.na(all$Fare),] # 1044
all %>% group_by(Pclsss) %>%
summarise(mean_Fare = mean(Fare, na.rm= T))
all %>% group_by('Pclsss') %>%
summarise(mean_Fare = mean(Fare, na.rm= T))
all %>% group_by(Pclass) %>%
summarise(mean_Fare = mean(Fare, na.rm= T))
all %>% group_by(Pclass) %>%
summarise(mean_Fare = mean(Fare, na.rm= T)) %>%
.[3]
all %>% group_by(Pclass) %>%
summarise(mean_Fare = mean(Fare, na.rm= T)) %>%
.[3,3]
all %>% group_by(Pclass) %>%
summarise(mean_Fare = mean(Fare, na.rm= T)) %>%
.[1,1]
all %>% group_by(Pclass) %>%
summarise(mean_Fare = mean(Fare, na.rm= T)) %>%
.[2,1]
all %>% group_by(Pclass) %>%
summarise(mean_Fare = mean(Fare, na.rm= T)) %>%
.[3,2]
# 1) Fare에 대한  Imputation
# a. Fare Value Indexing
all[is.na(all$Fare),] # 1044
# b-1. Pclass와 Fare 간의 Boxplot 그리기
all %>% ggplot(mapping = aes(Pclass,Fare)) %>%
geom_boxplot()
# b-1. Pclass와 Fare 간의 Boxplot 그리기
all %>% ggplot(mapping = aes(Pclass,Fare)) +
geom_boxplot()
#### Data Check
str(all)
#### Change int to Factor
# Survived, Pclass, Sex, Embarked는 Factor의 요소라고 볼 수 있음
all <- all %>% mutate(Survived = factor(Survived),
Pclass = factor(Pclass),
Sex = factor(Sex),
Embarked = factor(Embarked))
# b-1. Pclass와 Fare 간의 Boxplot 그리기
all %>% ggplot(mapping = aes(Pclass,Fare)) +
geom_boxplot()
# b-1. Pclass와 Fare 간의 Boxplot 그리기
all %>% ggplot(mapping = aes(Pclass,Fare)) +
geom_boxplot(fill=Pclass)
# b-1. Pclass와 Fare 간의 Boxplot 그리기
all %>% ggplot(mapping = aes(Pclass,Fare)) +
geom_boxplot(fill=Pclass)
fill=Pclass
# b-1. Pclass와 Fare 간의 Boxplot 그리기
all %>% ggplot(mapping = aes(Pclass,Fare)) +
geom_boxplot()
# b-1. Pclass와 Fare 간의 Boxplot 그리기
all %>% ggplot(mapping = aes(Pclass,Fare)) +
geom_boxplot(color = Pclass)
# b-1. Pclass와 Fare 간의 Boxplot 그리기
all %>% ggplot(mapping = aes(Pclass,Fare)) +
geom_boxplot(color = 'blue')
# b-1. Pclass와 Fare 간의 Boxplot 그리기
all %>% ggplot(mapping = aes(Pclass,Fare)) +
geom_boxplot(fill = 'skyblue')
#### Data Check
str(all)
# 1) Fare에 대한  Imputation
# a. Fare Value Indexing
all[is.na(all$Fare),] # 1044
# c. Embarked와 Fare 간의 관계
ggplot(data = all, mapping = aes(Embarked, Fare))+
geom_boxplot()
# d.
install.packages('corrplot')
library(corrplot)
corrplot(all)
cor(all)
corrplot(all,method='circle')
all$dimnames
corrplot(all,method='circle')
corrplot(mtcars,method='circle')
cor(all)
data <- iris
summary(iris)
str(iris)
# Generate Missing Values
install.packages('missForest')
library(missForest)
iris.mis <- prodNA(iris, noNA=0.1)
summary(iris.mis)
summary(all)
# Check NAs
summary(iris.mis)
# install MICE
install.packages('mice')
library(mice)
# Check NAs
summary(iris.mis)
# iris.mis delete categorical varable(Species)
subset(iris.mis, select=-c(Species))
# iris.mis delete categorical varable(Species)
head(subset(iris.mis, select=-c(Species)))
iris.mis$Species <- NA
iris.mis
subset(iris.mis, select = -c(Species))
iris.mis <- subset(iris.mis, select = -c(Species))
library(mice)
md.pattern(iris.mis)
md.pattern(iris.mis)
library(mice)
library(VIM)
aggr(iris.mis)
aggr(iris.mis, col=c('yellow','navyblue'))
aggr(iris.mis, col=c('navyblue','yellow'),
numbers = T)
aggr(iris.mis, col=c('navyblue','yellow'),
numbers = T, sortVars=T)
iris.mis
head(iris.mis)
aggr(iris.mis, col=c('navyblue','yellow'),
numbers = T, sortVars=T,
labels=names(iris.mis))
aggr(iris.mis, col=c('navyblue','yellow'),
numbers = T, sortVars=T,
labels=names(iris.mis))
names(iris.mis)
aggr(iris.mis, col=c('navyblue','yellow'),
numbers = TRUE, sortVars=T,
labels=names(iris.mis))
aggr(iris.mis, col=c('navyblue','yellow'),
numbers = TRUE)
# aggr function을 사용해서 Missing Value 시각화
aggr(all, prop = F, numbers = T) # 확률 대신 정수로 표현하겠다는 뜻
aggr(iris.mis, col=c('navyblue','yellow'),
prop = F, numbers = T)
iris.mis
aggr(iris.mis, col=c('navyblue','yellow'),
prop = F, numbers = T, sortVars = T
)
aggr(iris.mis, col=c('navyblue','yellow'),
prop = F, numbers = T, sortVars = T,
labels=names(iris.mis)
)
aggr(iris.mis, col=c('navyblue','yellow'),
prop = F, numbers = T, sortVars = T,
labels=names(iris.mis), cex.axis=.7
)
aggr(iris.mis, col=c('navyblue','yellow'),
numbers = T, sortVars = T,
labels=names(iris.mis), cex.axis=.7
)
aggr(iris.mis, col=c('navyblue','yellow'),
numbers = T, sortVars = T,
labels=names(iris.mis), cex.axis=.7,
gap = 3
)
aggr(iris.mis, col=c('navyblue','yellow'),
numbers = T, sortVars = T,
labels=names(iris.mis), cex.axis=.7,
gap = 3, ylab=c('Missin Data', 'Pattern')
)
mice(iris.mis, m=5,maxit=50, method='pmm',seed = 500)
library(mice)
imputed_data <- mice(iris.mis, m=5,maxit=50, method='pmm',seed = 500)
imputed_data <- mice(iris.mis, m=5,maxit=50, method='pmm',seed = 500)
md.pattern(nhanes)
# install MICE
install.packages('mice')
library(mice)
imputed_data <- mice(iris.mis, m=5,maxit=50, method='pmm',seed = 500)
library(missForest)
library(mice)
library(VIM)
# VIM missig data matrix
aggr(iris.mis, col=c('navyblue','yellow'),
numbers = T, sortVars = T,
labels=names(iris.mis), cex.axis=.7,
gap = 3, ylab=c('Missin Data', 'Pattern')
)
imputed_data <- mice(iris.mis, m=5,maxit=50, method='pmm',seed = 500)
package_version(R.version)
R.version
# VIM missig data matrix
aggr(iris.mis, col=c('navyblue','yellow'),
numbers = T, sortVars = T,
labels=names(iris.mis), cex.axis=.7,
gap = 3, ylab=c('Missin Data', 'Pattern')
)
imputed_data <- mice(iris.mis, m=5,maxit=50, method='pmm',seed = 500)
install.packages("installr")
library(installr)
check.for.updates.R()
install.R()
version()
check.for.updates.R()
check.for.updates.R()
library(installr)
check.for.updates.R()
check.for.updates.R()
version
install.packages(c("mice", "missForest", "VIM"))
library(missForest)
library(mice)
library(VIM)
# VIM missig data matrix
aggr(iris.mis, col=c('navyblue','yellow'),
numbers = T, sortVars = T,
labels=names(iris.mis), cex.axis=.7,
gap = 3, ylab=c('Missin Data', 'Pattern')
)
summary(iris)
str(iris)
# Generate Missing Values
install.packages('missForest')
# Check NAs
summary(iris.mis)
iris.mis <- prodNA(iris, noNA=0.1)
# Check NAs
summary(iris.mis)
# iris.mis delete categorical varable(Species)
head(subset(iris.mis, select=-c(Species)))
iris.mis <- subset(iris.mis, select = -c(Species))
# VIM missig data matrix
aggr(iris.mis, col=c('navyblue','yellow'),
numbers = T, sortVars = T,
labels=names(iris.mis), cex.axis=.7,
gap = 3, ylab=c('Missin Data', 'Pattern')
)
imputed_data <- mice(iris.mis, m=5,maxit=50, method='pmm',seed = 500)
summary(imputed_data)
md.pattern(iris.mis)
install.packages('gridExtra')
install.packages('corrplot')
install.packages(c("corrplot", "dplyr", "ggplot2", "gridExtra", "VIM"))
install.packages(c("corrplot", "dplyr", "ggplot2", "gridExtra", "VIM"))
library(dplyr)
library(ggplot2)
library(VIM) # Visualzation and imputation of Missing Values
library(corrplot) # corrplot
### Variable Definition
# survival	Survival	0 = No, 1 = Yes
# pclass	Ticket class	1 = 1st, 2 = 2nd, 3 = 3rd
# sex	Sex
# Age	Age in years
# sibsp	# of siblings / spouses aboard the Titanic
# parch	# of parents / children aboard the Titanic
# ticket	Ticket number
# fare	Passenger fare
# cabin	Cabin number
# embarked	Port of Embarkation
#### Data Load
train <- read.csv('data/train.csv')
test <- read.csv('data/test.csv')
all <- bind_rows(train,test) # 두개의 데이터를 합친다.
all_Origin <- all
#### Count Survival
train %>% count(Survived)
surv <- train %>% count(Survived) %>% filter(Survived == 1) %>% .$n
nosurv <- train %>% count(Survived) %>% filter(Survived == 0) %>% .$n
#### Data Check
str(all)
dim(all)
summary(all)
glimpse(all)
#### Change int to Factor
# Survived, Pclass, Sex, Embarked는 Factor의 요소라고 볼 수 있음
all <- all %>% mutate(Survived = factor(Survived),
Pclass = factor(Pclass),
Sex = factor(Sex),
Embarked = factor(Embarked))
#### Check Missing Value
library(VIM) # Visualzation and imputation of Missing Values
library(gridExtra)
# Cabin Data Missing Processing
# Cabin 변수를 보면 분명 공란이 많은데 NA로 인식하지 않는다.
table(is.na(all$Cabin))
# 따라서 해당 변수에서 len이 0이하이면 NA로 바꿔주는 작업을하려고 한다.
# ** length는 데이터 Set의 길이를 반환한다.
# ** nchar는 데이터 각 Row의 길이를 반환한다.
all$Cabin <- ifelse(nchar(all$Cabin)>0,all$Cabin,NA)
head(all)
data <- iris
summary(iris)
str(iris)
# Generate Missing Values
install.packages('missForest')
library(missForest)
iris.mis <- prodNA(iris, noNA=0.1)
# Check NAs
summary(iris.mis)
# iris.mis delete categorical varable(Species)
head(subset(iris.mis, select=-c(Species)))
iris.mis <- subset(iris.mis, select = -c(Species))
# install MICE
install.packages('mice')
library(mice)
library(VIM)
# missing data matrix
md.pattern(iris.mis)
# VIM missig data matrix - better version of md.pattern
aggr(iris.mis, col=c('navyblue','yellow'),
numbers = T, sortVars = T,
labels=names(iris.mis), cex.axis=.7,
gap = 3, ylab=c('Missin Data', 'Pattern')
)
imputed_data <- mice(iris.mis, m=5, maxit=50, method='pmm', seed = 500)
summary(imputed_data)
imputed_data
imputed_data$imp
imputed_data$imp$Sepal.Width
View(imputed_data)
# Get complete data
completeData <- complete(imputed_data,2)
completeData
View(imputed_data)
imputed_data[["data"]][["Sepal.Length"]]
View(imputed_data[["imp"]][["Sepal.Length"]])
imputed_data[["imp"]][["Sepal.Length"]]
imputed_data[["data"]][["Sepal.Width"]]
imputed_data[["imp"]][["Petal.Length"]]
complete(imputed_data,5)
# Build Predictive model
fit <- with(data = iris.mis, exp = lm(Sepal.Width ~ Sepal.Length + Petal.Width))
fit
# combine results of 5 models
combine <- pool(fit)
summary(combine)
# combine results of 5 models
combine <- pool(fit)
data <- iris
summary(iris)
str(iris)
sample(1:10,5,replace = T)
sample(1:10,5,replace = F)
# VIM missig data matrix - better version of md.pattern
aggr(iris.mis, col=c('navyblue','yellow'),
numbers = T, sortVars = T,
labels=names(iris.mis), cex.axis=.7,
gap = 3, ylab=c('Missin Data', 'Pattern')
)
# VIM missig data matrix - better version of md.pattern
aggr(iris.mis, col=c('navyblue','yellow'),
numbers = T, sortVars = T,
labels=names(iris.mis), cex.axis=.6,
gap = 3, ylab=c('Missin Data', 'Pattern')
)
# VIM missig data matrix - better version of md.pattern
aggr(iris.mis, col=c('navyblue','yellow'),
props=F, numbers = T, sortVars = T,
labels=names(iris.mis), cex.axis=.6,
gap = 3, ylab=c('Missin Data', 'Pattern')
)
# VIM missig data matrix - better version of md.pattern
aggr(iris.mis, col=c('navyblue','yellow'),
prop=F, numbers = T, sortVars = T,
labels=names(iris.mis), cex.axis=.6,
gap = 3, ylab=c('Missin Data', 'Pattern')
)
# Check NAs
summary(iris.mis)
all[nchar(all$Embarked) <1, ] #62, 830 Data Missing
all[nchar(all$Embarked) <1, ] #62, 830 Data Missing
#### 1. Data Load
train <- read.csv('data/train.csv')
test <- read.csv('data/test.csv')
all <- bind_rows(train,test) # 두개의 데이터를 합친다.
all_Origin <- all
#### 2. Count Survival
train %>% count(Survived)
surv <- train %>% count(Survived) %>% filter(Survived == 1) %>% .$n
nosurv <- train %>% count(Survived) %>% filter(Survived == 0) %>% .$n
#### 3. Data Check
str(all)
dim(all)
summary(all)
glimpse(all)
# a) Check Embarked
table(is.na(all$Embarked))
all[nchar(all$Embarked) <1, ] #62, 830 Data Missing
#### 1. Data Load
train <- read.csv('data/train.csv')
test <- read.csv('data/test.csv')
all <- bind_rows(train,test) # 두개의 데이터를 합친다.
all_Origin <- all
all[nchar(all$Embarked) <1, ] #62, 830 Data Missing
#### 1. Data Load
train <- read.csv('data/train.csv')
test <- read.csv('data/test.csv')
all <- bind_rows(train,test) # 두개의 데이터를 합친다.
library(dplyr)
library(ggplot2)
library(VIM) # Visualzation and imputation of Missing Values
library(corrplot) # corrplot
all <- bind_rows(train,test) # 두개의 데이터를 합친다.
all_Origin <- all
# a) Check Embarked
table(is.na(all$Embarked))
all[nchar(all$Embarked) <1, ] #62, 830 Data Missing
data[-c(62,830),] %>% ggplot(mapping= aes(Embarked, count(Embarked)))+
geom_boxplot()
data[-c(62,830),] %>% ggplot(mapping= aes(Embarked, count(all$Embarked)))+
geom_boxplot()
data[-c(62,830),] %>% ggplot(mapping= aes('Embarked', count(all$Embarked)))+
geom_boxplot()
data[-c(62,830),] %>% ggplot(mapping= aes('Embarked', count(all$'Embarked')))+
geom_boxplot()
data[-c(62,830),] %>% ggplot(mapping= aes('Embarked',Fare))+
geom_boxplot()
all[-c(62,830),] %>% ggplot(mapping= aes('Embarked',count(Embarked)))+
geom_boxplot()
all[-c(62,830),] %>% ggplot(mapping= aes(Embarked,count(Embarked)))+
geom_boxplot()
all[-c(62,830),] %>% ggplot(mapping= aes(Embarked,nrow(all)))+
geom_boxplot()
all[-c(62,830),] %>%
group_by(Embarked) %>%
summarise(n = n())
all[-c(62,830),] %>%
group_by(Embarked) %>%
summarise(n = n()) %>%
ggplot(mapping= aes(Embarked,))+
geom_boxplot()
all[-c(62,830),] %>%
ggplot(mapping= aes(Embarked,Fare))+
geom_boxplot()
all[nchar(all$Embarked) <1, "Embarked"] #62, 830 Data Missing
all[nchar(all$Embarked) <1, "Embarked"] <- NA#62, 830 Data Missing
all[nchar(all$Embarked) <1, "Embarked"] #62, 830 Data Missing
all[nchar(all$Embarked) <1] #62, 830 Data Missing
all[nchar(all$Embarked) <1, ] #62, 830 Data Missing
#### 1. Data Load
train <- read.csv('data/train.csv')
test <- read.csv('data/test.csv')
all <- bind_rows(train,test) # 두개의 데이터를 합친다.
#### 2. Count Survival
train %>% count(Survived)
surv <- train %>% count(Survived) %>% filter(Survived == 1) %>% .$n
nosurv <- train %>% count(Survived) %>% filter(Survived == 0) %>% .$n
# a) Check Embarked
table(is.na(all$Embarked))
all[nchar(all$Embarked) <1, ] #62, 830 Data Missing
all[nchar(all$Embarked) <1,]$Embarked  # <- NA # NA 처리해주기
all[nchar(all$Embarked) <1,]$Embarked   <- NA # NA 처리해주기
all[nchar(all$Embarked) <1, ] #62, 830 Data Missing
#### 1. Data Load
train <- read.csv('data/train.csv')
test <- read.csv('data/test.csv')
all <- bind_rows(train,test) # 두개의 데이터를 합친다.
all_Origin <- all
#### 2. Count Survival
train %>% count(Survived)
surv <- train %>% count(Survived) %>% filter(Survived == 1) %>% .$n
nosurv <- train %>% count(Survived) %>% filter(Survived == 0) %>% .$n
all[c(62,830),]
all[c(62,830),]$Embarked
